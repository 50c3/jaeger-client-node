{"version":3,"sources":["../../../src/reporters/udp_sender.js"],"names":["HOST","PORT","UDP_PACKET_MAX_LENGTH","UDPSender","options","_host","host","_port","port","_maxPacketSize","maxPacketSize","_logger","logger","_client","createSocket","on","error","err","_agentThrift","entryPoint","join","__dirname","allowOptionalArguments","allowFilesystemAccess","_jaegerThrift","source","readFileSync","_totalSpanBytes","batch","Agent","emitBatch","argumentsMessageRW","byteLength","_convertBatchToThriftMessage","_batch","length","span","Span","rw","process","_process","tagMessages","j","tags","tag","push","Tag","_thriftProcessMessage","Process","serviceName","_emitSpanBatchOverhead","_calcBatchSize","console","log","JSON","stringify","_maxSpanBytes","lengthResult","_calcSpanSize","numSpans","spanSize","spans","flush","flushResponse","bufferLen","thriftBuffer","Buffer","writeResult","writeInto","_reset","send","sent","offset","spanMessages","i","ArgumentsMessage","version","id","body","Batch","close"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport path from 'path';\nimport {Thrift} from 'thriftrw';\nimport NullLogger from '../logger.js';\n\nconst HOST = 'localhost';\nconst PORT =  6832;\nconst UDP_PACKET_MAX_LENGTH = 65000;\n\nexport default class UDPSender {\n    _host: string;\n    _port: number;\n    _maxPacketSize: number;\n    _process: Process;\n    _emitSpanBatchOverhead: number;\n    _logger: Logger;\n    _client: dgram$Socket;\n    _agentThrift: Thrift;\n    _jaegerThrift: Thrift;\n    _batch: Batch;\n    _thriftProcessMessage: any;\n    _maxSpanBytes: number;   // maxPacketSize - (batch + tags overhead)\n    _totalSpanBytes: number; // size of currently batched spans as Thrift bytes\n\n    constructor(options: any = {}) {\n        this._host = options.host || HOST;\n        this._port = options.port || PORT;\n        this._maxPacketSize = options.maxPacketSize || UDP_PACKET_MAX_LENGTH;\n        this._logger = options.logger || new NullLogger();\n        this._client = dgram.createSocket('udp4');\n        this._client.on('error', err => {\n            this._logger.error(`error sending spans over UDP: ${err}`)\n        });\n        this._agentThrift = new Thrift({\n            entryPoint: path.join(__dirname, '../thriftrw-idl/agent.thrift'),\n            allowOptionalArguments: true,\n            allowFilesystemAccess: true\n        });\n        this._jaegerThrift = new Thrift({\n            source: fs.readFileSync(path.join(__dirname, '../jaeger-idl/thrift/jaeger.thrift'), 'ascii'),\n            allowOptionalArguments: true\n        });\n        this._totalSpanBytes = 0;\n    }\n\n    _calcBatchSize(batch: Batch) {\n        return this._agentThrift.Agent.emitBatch.argumentsMessageRW.byteLength(\n            this._convertBatchToThriftMessage(this._batch)\n        ).length;\n    }\n\n    _calcSpanSize(span: any): LengthResult {\n        return this._jaegerThrift.Span.rw.byteLength(new this._jaegerThrift.Span(span));\n    }\n\n    setProcess(process: Process): void {\n        // This function is only called once during reporter construction, and thus will\n        // give us the length of the batch before any spans have been added to the span\n        // list in batch.\n        this._process = process;\n        this._batch = {\n            'process': this._process,\n            'spans': []\n        };\n\n        let tagMessages = [];\n        for (let j = 0; j < this._batch.process.tags.length; j++) {\n            let tag = this._batch.process.tags[j];\n            tagMessages.push(new this._jaegerThrift.Tag(tag));\n        }\n\n        this._thriftProcessMessage = new this._jaegerThrift.Process({\n            serviceName: this._batch.process.serviceName,\n            tags: tagMessages\n        });\n        this._emitSpanBatchOverhead = this._calcBatchSize(this._batch);\n        console.log(`jaeger emitSpanBatchOverhead: ${this._emitSpanBatchOverhead}, batch: ${JSON.stringify(this._batch, null, 4)}`);\n        this._maxSpanBytes = this._maxPacketSize - this._emitSpanBatchOverhead;\n    }\n\n    append(span: any): SenderResponse {\n        let lengthResult: LengthResult = this._calcSpanSize(span);\n        if (lengthResult.err) {\n            this._logger.error(`error converting span to Thrift: ${lengthResult.err}`);\n            console.log(`error converting span to Thrift: ${lengthResult.err}`);\n            return { err: true, numSpans: 1 };\n        }\n        let spanSize: number = lengthResult.length;\n        console.log(`spanSize: ${spanSize}`);\n        if (spanSize > this._maxSpanBytes) {\n            return { err: true, numSpans: 1 };\n        }\n\n        if (this._totalSpanBytes + spanSize <= this._maxSpanBytes) {\n            this._batch.spans.push(span);\n            this._totalSpanBytes += spanSize;\n            if (this._totalSpanBytes < this._maxSpanBytes) {\n                // still have space in the buffer, don't flush it yet\n                return {err: false, numSpans: 0};\n            }\n            return this.flush();\n        }\n\n        let flushResponse: SenderResponse = this.flush();\n        this._batch.spans.push(span);\n        this._totalSpanBytes = spanSize;\n        return flushResponse;\n    }\n\n    flush(): SenderResponse {\n        let numSpans: number = this._batch.spans.length;\n        if (numSpans == 0) {\n            return {err: false, numSpans: 0}\n        }\n\n        console.log(`jaeger _totalSpanBytes: ${this._totalSpanBytes}, this._emitSpanBatchOverhead: ${this._emitSpanBatchOverhead}`);\n        let bufferLen = this._totalSpanBytes + this._emitSpanBatchOverhead;\n        let thriftBuffer = new Buffer(bufferLen);\n        let writeResult;\n\n        try {\n            writeResult = this._agentThrift.Agent.emitBatch.argumentsMessageRW.writeInto(\n                this._convertBatchToThriftMessage(this._batch), thriftBuffer, 0\n            );\n        } catch(err) {\n            this._logger.error(`error writing Thrift object: ${err}, batch: ${this._batch}, length: ${bufferLen}`);\n            console.log(`error writing Thrift object: ${err}, batch: ${JSON.stringify(this._batch, null, 4)}, length: ${bufferLen}`);\n            this._reset();\n            return {err: true, numSpans: numSpans};\n        }\n\n        if (writeResult.err) {\n            this._logger.error(`error writing Thrift object: ${writeResult.err}`);\n            return {err: true, numSpans: numSpans};\n        }\n\n        // Having the error callback here does not prevent uncaught exception from being thrown,\n        // that's why in the constructor we also add a general on('error') handler.\n        this._client.send(thriftBuffer, 0, thriftBuffer.length, this._port, this._host, (err, sent) => {\n            if (err) {\n                this._logger.error(`error sending spans over UDP: ${err}, packet size: ${writeResult.offset}, bytes sent: ${sent}`);\n            }\n        });\n        this._reset();\n\n        return {err: false, numSpans: numSpans};\n    }\n\n    _convertBatchToThriftMessage() {\n        let spanMessages = [];\n        for (let i = 0; i < this._batch.spans.length; i++) {\n            let span = this._batch.spans[i];\n            spanMessages.push(new this._jaegerThrift.Span(span))\n        }\n\n        return new this._agentThrift.Agent.emitBatch.ArgumentsMessage({\n            version: 1,\n            id: 0,\n            body: {batch: new this._jaegerThrift.Batch({\n                    process: this._thriftProcessMessage,\n                    spans: spanMessages\n            })}\n        });\n    }\n\n    _reset() {\n        this._batch.spans = [];\n        this._totalSpanBytes = 0;\n    }\n\n    close(): void {\n        this._client.close();\n    }\n}\n"]}